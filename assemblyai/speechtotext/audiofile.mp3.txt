Hello friends, welcome to Global Tickle. In today's video we are going to learn various types of keys in SQL server and computed columns. Before we start with each type of key, let's understand what kind of data we have so we can relate the each type of key with the data. So here on screen you can see we have one table called department. And in department we have department id and department name. Under department name we have finance, marketing, R and D and customer service. And each department have their own department id. In below we have employee table where we have employee information like employee id that is a unique id for each record, then employee number that is assigned to the employee within the organization. Then we have employee first name, their last name, then gender, then department id. That means in which department employee is working. Then we have issued travel card. That is the card that needs to be issued. Only the employee who are working under marketing department. So here you can see for employee number one, that is John English, he is part of department id two. So in department table we can see department id two is the marketing. So he needs to be issue a travel card. So that's why in issue travel card we can see it is marked as yes for employee number two. Allen Tyson we can see he is part of department number one, that is finance. And under finance there is a no issue travel card available. Hence it is marked as no. And if you look at the employee number three, that is Tana, we can see she is part of department id two that is marketing. So she needs to be issue a travel card. So it is marked as yes. So from this data you can relate. We have employee details and we have under employee table we have department id that is the reference for the department table. Based on that we can identify the department for the employee. Now let's try to map this data in SQL server using different types of keys. So let's start with the key. The first key is primary key. Primary key is the unique identifier such as employee id or driver's license number that identifies the record within the table. Primary key is the unique identifier of the record in this table. So primary key is always a unique key that cannot be repeat or it cannot be a null or blank the table. So in department table you can see we have four different types of department and each has their own primary key. That is department id and it is unique. You will not find any duplicate key over here. So let's try to create a primary key in SQL server while creating a table. Now here we are in SQL server management studio. And here you can see we have create statement to create an employee table with the columns employee id, first name, last name, gender, department id and issue travel card. This is as per the structure what we seen in presentation. Let me execute this statement and see if it works. So yeah, it worked very fine. And we can see the employee table has created successfully. Let me drop this table. Okay, I had dropped the table and now let's try to create table once again along with the primary key. To add a primary key in the table for that we have to add the keywords like constraint. Then we have to provide the key name since we are creating primary key on top of employee id field. So let's name it PK that stands for primary key underscore empid. Then we have to provide the type of the key that we want to create. So that is primary key. And then we have to provide the list of fields or the field name. On top of that we want to create an employee id. So here we have employee id and along with this employee id if we want to provide an ordering of the key that we can also provide such as ascending or descending. So for now let me add ascending only and let's execute this script. And here we go. The table has created successfully along with the primary key. So let me refresh the list of tables and go to employee table and edit the records. And let's enter some data manually just to test if primary key works fine. So let me add primary key one. Then the employee name, let's say John Clinton gender bill department id let's say one then issue travel no and see as I hit the tab the data is got committed and it works fine. So now let me add another record. This time I will provide employee id as two, that is the unique value because it is not repeated. And let me add some different name English true and let me hit tab. It should work fine. And here you can see this works fine. Now let me try to add one duplicate value. So let me add two employee id. Two is already exist so this should throw error. So let's add something. Nick Taylor Chandler female one true. Now let's try to commit this data. So as soon as I hit the tab, as you can see we got the error here we can see the error message violation of primary key constraint PK employee id as we are trying to enter duplicate value in employee id. That's why it is throwing error. So let me change this employee id and then try to commit this. And now this works fine. Let me close this window and now try to retrieve the data from the employee table that we just created along with primary key and let me execute this query. You can see we have all three records with unique primary key. Now let's try to create department table with primary key but instead of using SQL script this time we will use designer window. So for that right click on the tables new then select table. And here we are on designer window to create a new table. So let me provide the field name that is department id and it should be data type as integer. And since we want this field as a primary key. So right click on this and and click on set this field as a primary key. Now here you can see we have key symbol over here just before this row that identify this field has been defined as primary key for this table. Now after that let me add second field, that is department name. This should be as a worker. Let me make the length as 50 and save this table and let me give it as a name as department and then ok now we should have department table under table folder. So let me refresh this and here you can see we have department table. Let me try to add data in department table. So let me enter department id as one, that is finance. Then we have department id, two as marketing, then we have department id, three s rnd, then we have department id, four as customer service. Now here you can see the data has added successfully. Let me close this window for now. So now we have created two tables, employee and department. And both table has their own primary key and we try to create this using SQL script as well as designer window. Now let's move on to the next key type, that is foreign key. Foreign key is the column or the set of columns that establish relationship of the table with the other table. So in this example here in employee table we had department id under that we had department number and that are coming from department table where we have departmentid like one, two, three and five. So let's try to create an departmentid field in employee table and as a foreign key to the department table. So the employee table can relate with the department table to pull the department name. Let's go back to the SQL Server management studio. Let's list all the data, select from employee and list data from department and let's execute the query. Now here you can see we have department id as 111 and then we have department id and department table. So these are the two fields that we want to set as the communication key between these two tables. So here the department id from the department table will work as a foreign key for the employee table based on the department id. To do this, as we already have both the tables, so we, we can alter the tables to define as the foreign key. So let me alter the table. So alter table, employee. And here we want to add a constraint. So let's add constraint keyword and then we have to provide the constraint name. So since we are trying to create a foreign key, so for that we usually prefix it with the fk, then we have to provide the foreign key name that is department id. So let's add a field name over here. After that we need to provide the type of the key. So here it is foreign key. So let me give the type name of the key. Then we have to provide the name of the field from the employee table. So in employee table we have department id that would be part of the foreign key relationship. And then we have to provide the other table name where it is gonna look for the foreign key. So that foreign table name is department. So let's give the reference table name, that is references towards department table. And then we have to provide the field name that is department id. So let's review this query once again. So here we are saying we want to alter the table, employee, and under alteration we want to add the constraint called as a foreign key, department id, and the constraint type is foreign key. And in this foreign key relationship, the key involved from employee table is the employee id. And then it will be referenced towards the department table based on the department id field. So let me execute this script and see how it works. It works successfully. So now let me refresh the list of the tables and let's see if we got the foreign key or not. So here in under the employee table, if I go to the keys, you can see now we have two keys. One is employee id, that is a primary key. Then we have foreign key, department id. And if I double click on this field here, you can see the relationship details. So if I go to the table, specific columns, and I if I click on these three dots, and here you can see from the department the involved field is department id. And from the employee table the involved key is department id. So from here we can understand what are the fields involved in this foreign key relationship. Now let's try to validate this relationship. For that, let's try to insert some data in employee table. And here you can see under department id we have value one only. And let me go back to the query. And here let's try to list department table and here we can see we have department id are one to four within department table. So if I insert any value from one to four within this department id, this should the valid case. But if I try to enter any value outside the 124 then it should throw the error. So let's try to insert some different value. So for this and this time let me add John Sandy, now this time let me insert nine as department id and issue travel card. Let's say no for now, false. And now let's try to commit this. And here you can see the database has thrown the error. It is saying is unable to insert the record as foreign key constraint has the conflict. Let me enter the valid value over here. And now let's try to commit this and it works fine. Now let's discuss the unique key. Unique key is the key in the table that works as an identifier of the record in the table. So here in this employee table you can see we have employee number that is unique for each employee that works to identify the employee within this table. Now here one can have question that if primary key is also a unique key, then what is the difference between unique and primary key. So let's discuss that. So primary key is the basically the key that works as the identifier of the record within this table. Similarly, unique keys also work as a identifier in this record. But the major difference between these two is in primary key cannot be null, but in a unique key we can have null, but that is only once in the table. The another difference is in table we can have only one primary key, but we can have multiple unique keys in the table. So for example in this table we have employee number as the unique identifier for the employee. But let's, if we want to add another unique key called as employee id card number, that is the id card issued to the employee. And each id card has their own unique value. So in that case, if you want to add that field over here and define that employee id card as a unique key, identify the employee. The table will allow us to add the unique key. So at the high level you can understand unique key can be used in absence of the primary key or in the place of the primary key, but they both have their own usage. Now let's try to create a unique key in SQL. Now here we are in SQL server again and let's try to list the values from employee table. Now here we have employee id, first name, last name, gender, department id and issue travel id. So let's say in this table we want to add a constraint as the unique key based on the last name. So here you can see we have Clinton, English, Taylor and Sandy. These are the unique values in this table. So for that we can alter the table employee and we can say the sequel that we want to add and constraint. Then constraint name should be unique. So Uk underscore last name. So we want to create on top of the last name. So let give the name field name in the key name. Then we have to provide the type of the key that is unique and then we have to provide the field name. So that is last name and that's it. Let's execute this query and it works fine. Now let's go back to employee table. Let me refresh this and under employee table we should see the unique constraint. Yeah, here is the unique constraint. Now let's try to insert duplicate data for unique field just to check if it works fine or not. So for this time let me add employee ids file the first name. Let me add John again this is the duplicate value and this time last name. Let me add Taylor once again. So this is duplicate value for last name mail. Then let me department one. Then it should throw errors. Let me try to convert this. And here we are. It throws an error that violation of the unique key. So now let me try to fix the unique key. So now instead of Taylor let me add different name that is man. And now let's try to commit this. And this works fine. Now let's discuss the identity. Identity is the functionality in SQL server to generate the unique keys for the fields. So for example, if we want to create a numeric field where we know that it will keep incremented by one or two or some defined value and then we don't want to maintain it manually. In that case we can define that field as identity. By that the SQL server will understand this is the key that SQL has to maintain and just keep it increasing while inserting any new record in the table. So technically you can understand there is a sequence that SQL Server has created in background and then it has been tagged to the identity field and SQL Server is keeping the SQL number updated whenever we are inserting any new records. So let's try this in the SQL server. Let's drop the existing employee table and let's create it again. And for this time I want to add the employee number as identity and it should start from one and it should keep increasing by one. And let's close this parenthesis. So let's understand what we have just added in the existing create table statement for the employee table. So we have added one extra field that is called employee number. And we are defining this field as identity. And so the identity start with one and will keep increase by one. So let's try to execute this query. Oops, we missed the data type. Let me add the data type over here and let's execute this query. And this works fine. So now let's refresh the list of the objects and try to insert some data in employee table. So here employee id one first name John Clinton. I am just adding random values. Now here we are at the employee number and let's skip this and you can see it is auto populated by one. Now this time I will just add employee id. Two, let's say run name zero true sorry, one. Now here I will not add any value, I will just skip this field and see this is auto populated by two. So in this way the SQL server will value add in this employee number field that will be increased by one. Now let's try to create the same identity field from the designer window. For that let me try to create a new table and let's add only one, let's say id and I want to make it as an integer and it should not be null. And let's try to make this field as the identity field. And for that down here you can see under properties window we have identity specification. So here we can just mark this field as a yes. And here we can configure by what number we want to keep this increasing. So let's as a step we are marking as a one only and then let me add something name and save this table as the test table and close this window and let's refresh the list of objects and go back to the test table. And titan add some data over here. So id is the identity. So I will not add something, I will just add name, that is Ryan and Swan. Now this time I will add John and it's true. So here you can see the identity is keep increasing based on the incremental value configure. Now let's discuss the composite key. Composite key is the set of keys or you can say more than one key that together will work as a unique identifier of the record within the table. So let's try to understand the composite key in this table. Here in employee table you can see the first name and last name together are making the employee unique in the table. So if I look at the first record that is John and then the last name is the English. So John English will make this record as a unique. If I remove the last name and if I will focus on the first name only, then John we have at the row number one, then we have John at the row number four. So if I want to make the first name as the key of this table, then it will create a problem because we have duplicate value that is John in the same table. And from business perspective we can understand the first name can be repeated just to avoid the situation. We can use two fields or more than two fields in the table that together will work as the unique identifier in the table. There can be the cases where even first name and last name together can make the duplicate value. So in that case we might want to add one more record to be part of the unique key of identifier for this table. In that case we can add let's say date of birth or maybe address or something in the table and we can make it the part of the composite key to identify the unique record. So for now just let's assume we want to create a composite key based on first name and last name. So let's jump into the database and see how we can create the composite key. So here we are in database and here you can see we have employee table. So let me remove this employee table from the database and just try to create this using the SQL statement. So here the create statement is the same like we had used previously many times. And the only change here would be while defining the primary key columns. Here I will provide the multiple columns as the primary key. So that would be the first name and then last name. So these two fields together will work as the primary key. And as we have two fields as a primary key, so it will work as a composite key. And yeah, also the make sure all the keys, all the fields which are part of the composite key, it should always be not null only. So now let's try to execute this query. Here we go. The query executed successfully. Let me refresh this and just try to insert some data in employee table, employee id one. Now first name, let's say John Clinton and mail department. Let me add any value over here. Now let's add John again. And this time let's say with a different last name, we have made some mistake. Just DB, sorry, we are adding some null and employee id like. Yeah, so let's go ahead. And here you can see it accepted the John Teddy as well. Now this time let me add duplicate value John Teddy again. So this should throw an error and here we are, we are getting the violation of the primary key of the employee name. So here we can see we have duplicate value. Now this time let me change the john to the ran and let's see it works. Now let's talk about the computed columns. The computed columns are the fields within the tables that needs to be derived from the other fields within the table. So for example, we have a field called employee basic salary and employee HRA. And the employee salary should be the basic salary plus HRA. Then either we can calculate the salary manually by sum them or we can define the formula within the SQL server table definition and it will calculate automatically while inserting any record in the table. So let's see how this works in the SQL server. Let's drop the employee table once again and let's try to create it once again. And this time let's remove all these constraints and add over here P six Ali as integer, then hre as integer. Then we want the total salary as. Now instead of providing any data type here, we will just provide an formula that is basic salary plus HRA. And that's it. Let's try to execute this statement. And here we go, the employee table has been created. Let me refresh the list of tables and let's go to employee table and try to add some data over it there. So here you can see we have employee id. Let me add some value. First name John Terry department id variable one one. Now here we are on basic salary. Let me add 1000 and HRA. Let me at 200. Now in total salary we should get 1200 automatically populated by SQL server. So let me try to commit this record and here you can see the total salary has been calculated by SQL server. So in this way we don't need to calculate the fields manually and then update in the table and we can just let the database do this for us. So this is all for the today's session. I hope you learn some new things for the SQL server and see you in next video. Till then, take care.